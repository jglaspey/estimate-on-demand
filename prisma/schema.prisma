generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Job {
  id                 String              @id @default(cuid())
  status             JobStatus           @default(UPLOADED)
  fileName           String
  fileSize           Int
  uploadedAt         DateTime            @default(now())
  processedAt        DateTime?
  completedAt        DateTime?
  updatedAt          DateTime            @updatedAt
  error              String?
  filePath           String?
  fileHash           String?             @unique
  customerName       String?
  customerAddress    String?
  customerPhone      String?
  customerEmail      String?
  claimNumber        String?
  policyNumber       String?
  dateOfLoss         DateTime?
  carrier            String?
  claimRep           String?
  estimator          String?
  originalEstimate        Float?
  roofSquares             Float?
  roofStories             Int?
  rakeLength              Float?
  eaveLength              Float?
  ridgeHipLength          Float?
  valleyLength            Float?
  roofSlope               String?
  roofMaterial            String?
  userId                  String?
  extractionConfidence    String?  // 'high', 'medium', 'low'
  extractionRate          Int?     // percentage 0-100
  phase1ProcessingTime    Int?     // milliseconds
  documentPages      DocumentPage[]
  documents          Document[]
  mistralExtractions MistralExtraction[]
  ruleAnalyses       RuleAnalysis[]
  sonnetAnalyses     SonnetAnalysis[]

  @@map("jobs")
}

model Document {
  id          String         @id @default(cuid())
  jobId       String
  fileName    String
  pageCount   Int?
  status      DocumentStatus @default(UPLOADED)
  processedAt DateTime?
  error       String?
  filePath    String?
  fileSize    Int?
  mimeType    String?
  pages       DocumentPage[]
  job         Job            @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model DocumentPage {
  id               String   @id @default(cuid())
  documentId       String
  jobId            String
  pageNumber       Int
  extractedContent Json
  rawText          String?
  wordCount        Int      @default(0)
  extractedAt      DateTime @default(now())
  extractionMethod String   @default("mistral-ocr")
  confidence       Float?
  width            Int?
  height           Int?
  imageCount       Int      @default(0)
  document         Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  job              Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@unique([documentId, pageNumber])
  @@index([jobId, pageNumber])
  @@index([extractedContent])
  @@map("document_pages")
}

model MistralExtraction {
  id             String           @id @default(cuid())
  jobId          String
  mistralModel   String           @default("mistral-large-latest")
  documentType   String?
  processingTime Int?
  tokenUsage     Json?
  cost           Float            @default(0.0)
  success        Boolean          @default(true)
  error          String?
  extractedData  Json
  customerName   String?
  claimNumber    String?
  pageCount      Int?
  confidence     Float            @default(0.0)
  extractedAt    DateTime         @default(now())
  job            Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  analyses       SonnetAnalysis[]

  @@index([jobId, extractedAt])
  @@map("mistral_extractions")
}

model SonnetAnalysis {
  id                        String            @id @default(cuid())
  jobId                     String
  mistralExtractionId       String
  sonnetModel               String            @default("claude-sonnet-4")
  analysisType              AnalysisType      @default(BUSINESS_RULES)
  processingTime            Int
  tokenUsage                Json
  cost                      Float             @default(0.0)
  success                   Boolean           @default(true)
  error                     String?
  overallAssessment         Json
  businessRuleEvaluations   Json
  complianceFindings        Json
  supplementRecommendations Json?
  accuracyScore             Float             @default(0.0)
  completenessScore         Float             @default(0.0)
  confidenceScore           Float             @default(0.0)
  analyzedAt                DateTime          @default(now())
  job                       Job               @relation(fields: [jobId], references: [id], onDelete: Cascade)
  mistralExtraction         MistralExtraction @relation(fields: [mistralExtractionId], references: [id], onDelete: Cascade)

  @@index([jobId, analyzedAt])
  @@index([mistralExtractionId])
  @@map("sonnet_analyses")
}

model RuleAnalysis {
  id             String       @id @default(cuid())
  jobId          String
  ruleType       RuleType
  status         RuleStatus   @default(PENDING)
  passed         Boolean?
  confidence     Float?
  findings       Json
  recommendation String?
  reasoning      String?
  userDecision   UserDecision @default(PENDING)
  userNotes      String?
  editedValues   Json?
  analyzedAt     DateTime?
  decidedAt      DateTime?
  job            Job          @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("rule_analyses")
}

enum JobStatus {
  UPLOADED
  QUEUED
  PROCESSING
  TEXT_EXTRACTED
  ANALYSIS_READY
  ANALYZING
  REVIEWING
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}

enum DocumentStatus {
  UPLOADED
  PROCESSING
  COMPLETED
  FAILED
}

enum AnalysisType {
  BUSINESS_RULES
  COMPLIANCE
  SUPPLEMENT
  QUALITY_CHECK
}

enum RuleType {
  HIP_RIDGE_CAP
  STARTER_STRIP
  DRIP_EDGE
  GUTTER_APRON
  ICE_WATER_BARRIER
}

enum RuleStatus {
  PENDING
  ANALYZING
  PASSED
  FAILED
  WARNING
  MANUAL
  INSUFFICIENT_DATA
  SUPPLEMENT_NEEDED
  COMPLIANT
}

enum UserDecision {
  PENDING
  ACCEPTED
  MODIFIED
  REJECTED
  MANUAL
}
